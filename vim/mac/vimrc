" The overview to use the vim config
"
" 1. Install `vim-plug`
"
"     curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
"         https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
"
" 2. Copy the setting to .vimrc
" 3. Write the setting to $HOME/.config/nvim/init.vim
"
"    set runtimepath^=~/.vim runtimepath+=~/.vim/after
"    let &packpath = &runtimepath
"    source ~/.vimrc
"
" 4. If you use neovim, install `neovim` pakcage
"
"    pip install neovim
"
" 5. Open neovim/vim and type `:PlugInstall` and `":UpdateRemotePlugins`

" Remapping leader key
let mapleader = ","


filetype plugin indent on

if &compatible
    set nocompatible
endif

" Use vim-plugged as plugin manager
" Install plugin reference: https://github.com/junegunn/vim-plug
call plug#begin('~/.vim/plugged')

" Colorscheme
Plug 'chriskempson/tomorrow-theme', {'rtp': 'vim'}
Plug 'fneu/breezy'

" General
Plug 'tpope/vim-sensible'
Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-speeddating'
Plug 'tpope/vim-sensible'
Plug 'terryma/vim-multiple-cursors'

Plug 'scrooloose/nerdcommenter'
Plug 'Raimondi/delimitMate'
Plug 'michaeljsmith/vim-indent-object'
Plug 'ntpeters/vim-better-whitespace'

" golang
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }

" Python syntax
Plug 'vim-python/python-syntax'
Plug 'Chiel92/vim-autoformat'

" Search
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'Shougo/unite.vim'
Plug 'Shougo/unite-outline'

" Status line & tab line
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" Autocomplete
if has('nvim')
    Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
    Plug 'Shougo/deoplete.nvim'
    Plug 'roxma/nvim-yarp'
    Plug 'roxma/vim-hug-neovim-rpc'
endif

Plug 'Shougo/neco-syntax'      " language syntax
Plug 'zchee/deoplete-jedi'     " Python
Plug 'davidhalter/jedi-vim'
Plug 'zchee/deoplete-go', { 'do': 'make'} " Go
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'

call plug#end()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" General setting
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set nu
set cursorline
set encoding=utf-8
set fileencoding=utf-8
set termencoding=utf-8
set ambiwidth=double

" Color configuration
set bg=dark
syntax enable
if isdirectory($HOME.'/.vim/plugged/tomorrow-theme/vim')
    colorscheme Tomorrow-Night-Eighties
endif
hi LineNr cterm=bold ctermfg=DarkGrey ctermbg=None
hi CursorLineNr cterm=bold ctermfg=Green ctermbg=None

if has("termguicolors")
    " enable true color
    set termguicolors
endif

" Disable bleep!
set visualbell
set noerrorbells

set novisualbell
set tm=500

" Disable swap files
set noswapfile

set backspace=indent,eol,start

" indent key mapping
nnoremap <tab> v>
nnoremap <s-tab> v<
vnoremap <tab> >gv
vnoremap <s-tab> <gv

" tab key mapping
nnoremap <leader>tc :tabnew<CR>
nnoremap <leader>te :tabedit<SPACE>
nnoremap <leader>tm :tabmove<SPACE>
nnoremap <leader>tk :tabclose<CR>
nnoremap <C-H> :tabprev<CR>
nnoremap <C-L> :tabnext<CR>

" Enable folding
set foldmethod=indent
set foldlevel=99


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vim-go setting
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:go_fmt_command = "goimports"

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Python setting
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let python_highlight_all = 1

" set python indention
set tabstop=4
set softtabstop=4
set shiftwidth=4
set textwidth=79
set expandtab
set autoindent
set fileformat=unix

" auto format when saving files
" need to run `pip install autopep8`
let g:formatdef_autopep8 = "'autopep8 - --range '.a:firstline.' '.a:lastline"
let g:formatters_python = ['autopep8']
au BufWrite *py :Autoformat

" vim-flake8
" To check pep8 python syntax when saving py files
" https://github.com/nvie/vim-flake8
autocmd BufWritePost *.py call flake8#Flake8()
let g:flake8_show_in_gutter=1


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Status line
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:airline_powerline_fonts = 0
let g:airline_detect_modified = 1
let g:airline_detect_paste = 1
let g:airline_detect_iminsert = 0
let g:airline_left_sep='>'
let g:airline_right_sep='<'
let g:airline_theme='cobalt2'

let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'unique_tail'


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" File search function
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Fzf:
" This is the default extra key bindings
let g:fzf_action = {
            \ 'ctrl-t': 'tab split',
            \ 'ctrl-x': 'split',
            \ 'ctrl-v': 'vsplit' }

" Customize fzf colors to match your color scheme
"let g:fzf_colors =
"\ { 'fg':      ['fg', 'Normal'],
"\ 'bg':      ['bg', 'Normal'],
"\ 'hl':      ['fg', 'Function'],
"\ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
"\ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
"\ 'hl+':     ['fg', 'Function'],
"\ 'info':    ['fg', 'PreProc'],
"\ 'prompt':  ['fg', 'Conditional'],
"\ 'pointer': ['fg', 'Exception'],
"\ 'marker':  ['fg', 'Keyword'],
"\ 'spinner': ['fg', 'Label'],
"\ 'header':  ['fg', 'Comment'] }

" [Buffers] Jump to the existing window if possible
let g:fzf_buffers_jump = 1

" [[B]Commits] Customize the options used by 'git log':
let g:fzf_commits_log_options = '--graph --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr"'

" key binding
autocmd VimEnter * command! Yen3Files
            \ call fzf#vim#files(<q-args>, {'left': '50%', 'options': '--reverse --prompt=""'})

autocmd VimEnter * command! Yen3Ag
            \ call fzf#vim#ag(<q-args>, {'left': '80%', 'options': '-e --reverse --prompt=""'})

autocmd VimEnter * command! Yen3AgCursorWord
            \ call fzf#vim#ag(<q-args>, {'left': '80%', 'options': '-e --reverse --prompt="" -q '. shellescape(expand('<cword>'))})

noremap <silent><C-P> :Yen3Files<CR>
noremap <silent><leader>s :Yen3Ag<CR>
noremap <silent><leader>ss :Yen3AgCursorWord<CR>
noremap <silent><leader>b :Buffers<CR>

" Unite Outline:
let g:unite_enable_split_vertically = 1
let g:unite_enable_ignore_case = 1
let g:unite_enable_smart_case = 1
let g:unite_enable_use_short_source_names = 1
" outline
nnoremap <leader>o :Unite -start-insert outline<CR>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Autocomplete setting
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Need to ```pip3 install --user pynvim```
" Deoplete:{{{
" Use deoplete.
let g:deoplete#enable_at_startup = 1
let g:deoplete#enable_smart_case = 1

set wildmenu                "enable ctrl-n and ctrl-p to scroll thru matches
set completeopt-=preview    "no scratch window

inoremap <silent><expr> <Tab>
            \ pumvisible() ? "\<C-n>" : "<Tab>"

" deoplete-jedi options (Python)
function! ChompedSystem( ... )
    return substitute(call('system', a:000), '\n\+$', '', '')
endfunction

let g:python3_host_prog = ChompedSystem('which python3')
" }}}
" UltiSnips :{{{
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<c-l>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

let g:ycm_key_list_select_completion=[]
let g:ycm_key_list_previous_completion=[]

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"
" }}}

" vim: ft=vim foldmethod=marker foldcolumn=1
set tags=tags
